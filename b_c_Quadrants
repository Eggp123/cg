#include <GL/glut.h>
#include <iostream>

using namespace std;

int radius;

// Function to plot all 8 symmetrical points of the circle
void plotCirclePoints(int xc, int yc, int x, int y) {
    glVertex2i(xc + x, yc + y);
    glVertex2i(xc - x, yc + y);
    glVertex2i(xc + x, yc - y);
    glVertex2i(xc - x, yc - y);
    glVertex2i(xc + y, yc + x);
    glVertex2i(xc - y, yc + x);
    glVertex2i(xc + y, yc - x);
    glVertex2i(xc - y, yc - x);
}

// Bresenham Circle Drawing Algorithm
void drawCircle(int xc, int yc, int r) {
    int x = 0, y = r;
    int d = 3 - 2 * r;

    while (x <= y) {
        plotCirclePoints(xc, yc, x, y);
        if (d < 0) {
            d += 4 * x + 6;
        } else {
            d += 4 * (x - y) + 10;
            y--;
        }
        x++;
    }
}

// Display Function
void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glBegin(GL_POINTS);

    // Draw in all quadrants with same radius but different centers
    drawCircle(0, 0, radius);                      // Center
    drawCircle(-radius * 2,  radius * 2, radius);  // Top-left quadrant
    drawCircle( radius * 2,  radius * 2, radius);  // Top-right quadrant
    drawCircle(-radius * 2, -radius * 2, radius);  // Bottom-left quadrant
    drawCircle( radius * 2, -radius * 2, radius);  // Bottom-right quadrant

    glEnd();
    glFlush();
}

// Initialization
void init() {
    glClearColor(0.0, 0.0, 0.0, 1.0); // Black background
    glColor3f(1.0, 1.0, 1.0);         // White points
    gluOrtho2D(-500, 500, -500, 500); // Coordinate system
}

// Main Function
int main(int argc, char** argv) {
    cout << "Enter radius of the circle: ";
    cin >> radius;

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(800, 800);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Bresenham Circle in All Quadrants");

    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
